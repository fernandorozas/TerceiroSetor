@using Blazored.Modal
@using Blazored.Modal.Services
@using TerceiroSetor.DTOs.OrganizacaoSocial.Commands
@using TerceiroSetor.DTOs.OrganizacoesSociais

@inject IServiceOrganizacaoSocial service

<DomainErrorsSummary Erros="@Erros" />

<EditForm Model="@Model" OnValidSubmit="@OnValidSubmit" class="mt-2">

    <FormInputContainer Label="Desativar Organizacao Social">
        
        <InputDate class="form-control" @bind-Value="@Model.DataAlteracao" />
        <ValidationMessage For="@(() => Model.DataAlteracao)" />

    </FormInputContainer>

    <button type="submit" class="btn btn-primary">
        Desativar Organizacao Social
    </button>

</EditForm>

@code {

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter]
    public OrganizacaoSocialDTO OrganizacaoSocial { get; set; }
    
    public /*EncerrarVigenciaConselhoCommand*/ AlterarStatusOrganizacaoSocialCommand Model { get; set; } = new /*EncerrarVigenciaConselhoCommand()*/ AlterarStatusOrganizacaoSocialCommand();
    private List<string> Erros { get; set; } = new List<string>();

    protected override void OnParametersSet()
    {
        Model.OrganizacaoSocialId = OrganizacaoSocial.Id;
    }


    private async Task OnValidSubmit()
    {
        var response = await service.AlterarStatusOrganizacaoSocial(Model);

        if (response.Messages.Any())
        {
            Erros = response.Messages;
            return;
        }
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }

}
