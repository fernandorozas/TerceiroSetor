@page "/informar-Conselhos/{id:guid}"

@using Blazored.Modal
@using Blazored.Modal.Services
@using TerceiroSetor.DTOs.OrganizacoesSociais

@inject IServiceOrganizacaoSocial service


<div class="mb-3">
    <button class="btn btn-primary" @onclick="(() => AbrirFormularioConselho())">
        <i class="ph-plus-circle me-1"></i>
        Cadastrar Conselho
    </button>

    <NavLink class="btn btn-secondary" href="/organizacoes">
        <i class="ph-arrow-circle-left me-1"></i>
        Voltar
    </NavLink>
</div>

<div class="card">
    <div class="table-responsive">
        <QuickGrid Items="@Conselhos" class="table table-striped">
            <PropertyColumn Property="@(p => p.TipoConselho)" Sortable="true" Title="Tipo Conselho" />
            <PropertyColumn Property="@(p => p.InicioVigencia)" Sortable="true" Align="Align.Center" Title="Data Início Vigência" Format="dd-MM-yyyy" />
            <PropertyColumn Property="@(p => p.FinalVigencia)" Sortable="true" Align="Align.Center" Title="Data Fim Vigência" Format="dd-MM-yyyy" />
            <TemplateColumn Title="Ações" Align="Align.Center">
                <button class="btn btn-outline-primary btn-icon rounded-pill" @onclick="(() => AbrirFormularioEncerrarVigencia(context.TipoConselho))" title="Encerrar Vigencia">
                    <i class=" ph-calendar">
                    </i>
                </button>
            </TemplateColumn>
        </QuickGrid>
    </div>
</div>


@code {


    [Parameter]
    public Guid Id { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    public IQueryable<ConselhoDTO> Conselhos { get; set; } = null;
    public OrganizacaoSocialDTO OrganizacaoSocial { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await AtualizarConselhos();
    }

    private async Task AtualizarConselhos()
    {
        OrganizacaoSocial = await service.GetByIdAsync(Id);
        Conselhos = OrganizacaoSocial.Conselhos.AsQueryable();
    }

    private async Task AbrirFormularioConselho()
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(OrganizacaoConselho.OrganizacaoSocial), OrganizacaoSocial);

        var responsavelForm = Modal.Show<OrganizacaoConselho>("Conselho",
                            parameters, new ModalOptions() { Size = ModalSize.Large });

        var result = await responsavelForm.Result;

        if (result.Confirmed)
            await AtualizarConselhos();

    }

    private async Task AbrirFormularioEncerrarVigencia(TipoConselhoDTO tipoConselhoDTO)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(EncerrarVigenciaConselhoComponent.OrganizacaoSocial), OrganizacaoSocial);
        parameters.Add(nameof(EncerrarVigenciaConselhoComponent.TipoConselho), tipoConselhoDTO);

        var responsavelForm = Modal.Show<EncerrarVigenciaConselhoComponent>("Encerrar Vigência",
                        parameters, new ModalOptions() { Size = ModalSize.Large });

        var result = await responsavelForm.Result;

        if (result.Confirmed)
            await AtualizarConselhos();

    }

}
